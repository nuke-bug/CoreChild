from fastapi import FastAPI, APIRouter, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import select, update
import pandas as pd
import asyncio
import json
from datetime import datetime
import logging

from generator import start_generation, find_data, clean_processed_data_and_stop
from database import (
    BpmProcessedData, BpmArchiveProcessedData, Interfaces,
    UterusProcessedData, UterusArchiveProcessedData,
    init_db, get_async_db, close_db_connection,
    AsyncSessionLocal
)
from analysis_ctg import main


import logging
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç SQLAlchemy
logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)



app = FastAPI(
    title="Simple API",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    openapi_url="/api/openapi.json"
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware, —Ä–∞–∑—Ä–µ—à–∞—è –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

router = APIRouter()

@router.api_route("/start", methods=["GET", "POST"])
async def generate_data_endpoint():
    """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ –ø–æ API –≤—ã–∑–æ–≤—É"""
    asyncio.create_task(start_generation(AsyncSessionLocal))
    return {"status": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ"}

@router.api_route("/stop", methods=["GET", "POST"])
async def generate_data_endpoint():
    """Stop –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ –ø–æ API –≤—ã–∑–æ–≤—É"""
    asyncio.create_task(clean_processed_data_and_stop(AsyncSessionLocal))
    return {"status": "STOP"}

app.include_router(router)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global AsyncSessionLocal
    engine, AsyncSessionLocal = await init_db()
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await find_data(AsyncSessionLocal)

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await close_db_connection()


Bpm_Last_stop_time = 0
Uterus_Last_stop_time = 0

from fastapi import WebSocket, WebSocketDisconnect
import json
from datetime import datetime

@app.websocket("/ws/fetus")
async def websocket_fetus_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–æ–¥–∞ (BPM —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º)"""
    global Bpm_Last_stop_time
    await websocket.accept()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç –∫ WebSocket –ø–ª–æ–¥–∞")

    try:
        while True:
            async with AsyncSessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º BPM –¥–∞–Ω–Ω—ã–µ
                result = await session.execute(select(BpmProcessedData.time, BpmProcessedData.bpm))
                metrics = result.all()

                if not metrics:
                    print("‚ö†Ô∏è –ù–µ—Ç BPM –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.")
                    df_bpm = pd.DataFrame(columns=["time_sec", "value"])
                else:
                    df_bpm = pd.DataFrame(metrics, columns=["time_sec", "value"])
                    df_bpm["time_sec"] = pd.to_numeric(df_bpm["time_sec"], errors="coerce")
                    df_bpm["value"] = pd.to_numeric(df_bpm["value"], errors="coerce")
                    df_bpm.dropna(subset=["time_sec", "value"], inplace=True)

                print(f"–ù–∞–π–¥–µ–Ω–æ BPM –º–µ—Ç—Ä–∏–∫: {len(df_bpm)}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–∫–∏
                result = await session.execute(select(UterusProcessedData.time, UterusProcessedData.power))
                metrics = result.all()

                if not metrics:
                    print("‚ö†Ô∏è –ù–µ—Ç uterus –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.")
                    df_uterus = pd.DataFrame(columns=["time_sec", "value"])
                else:
                    df_uterus = pd.DataFrame(metrics, columns=["time_sec", "value"])
                    df_uterus["time_sec"] = pd.to_numeric(df_uterus["time_sec"], errors="coerce")
                    df_uterus["value"] = pd.to_numeric(df_uterus["value"], errors="coerce")
                    df_uterus.dropna(subset=["time_sec", "value"], inplace=True)

                print(f"–ù–∞–π–¥–µ–Ω–æ uterus –º–µ—Ç—Ä–∏–∫: {len(df_uterus)}")

                # –ê–Ω–∞–ª–∏–∑ CTG
                new_data = main(df_bpm, df_uterus)
                print(new_data)
                # print(df_uterus)

                # –û—á–∏—â–∞–µ–º –æ—Ç NaN
                new_data.dropna(subset=[
                    'time', 'bpm', 'basal_rhythm', 'hrv', 'acceleration', 'deceleration',
                    'hypoxia', 'basal_status', 'hrv_status', 'decel_status', 'accel_status',
                    'hypoxia_15', 'hypoxia_30', 'hypoxia_60'
                ], inplace=True)

                if new_data.empty:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN")
                    await asyncio.sleep(1)
                    continue

                for _, row in new_data.iterrows():
                    if Bpm_Last_stop_time < float(row['time']):
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
                        fetus_data = {
                                "time": float(row['time']),
                                "bpm": int(row['bpm']),
                                "basal_rhythm": int(row['basal_rhythm']),
                                "hrv": int(row['hrv']),
                                "acceleration": bool(row['acceleration']),
                                "deceleration": bool(row['deceleration']),
                                "hypoxia": str(row['hypoxia']),
                                "basal_status": str(row['basal_status']),
                                "hrv_status": str(row['hrv_status']),
                                "decel_status": str(row['decel_status']),
                                "accel_status": str(row['accel_status']),
                                "hypoxia_15": int(row['hypoxia_15']),
                                "hypoxia_30": int(row['hypoxia_30']),
                                "hypoxia_60": int(row['hypoxia_60']),
                                "timestamp": datetime.now().isoformat(),
                                "type": "fetus"
                        }

                        try:
                            if Bpm_Last_stop_time < float(row['time']):
                            
                                await websocket.send_text(json.dumps(fetus_data))
                                
                        except RuntimeError as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket –ø–ª–æ–¥–∞: {e}")
                            break  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ while True

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
                        await session.execute(update(BpmProcessedData).where(
                            BpmProcessedData.time == float(row['time']),
                            BpmProcessedData.bpm == int(row['bpm'])
                        ).values(
                            displayed=True,
                            basal_rhythm=int(row['basal_rhythm']),
                            hrv=int(row['hrv']),
                            acceleration=bool(row['acceleration']),
                            deceleration=bool(row['deceleration']),
                            hypoxia=str(row['hypoxia']),
                            basal_status=str(row['basal_status']),
                            hrv_status=str(row['hrv_status']),
                            decel_status=str(row['decel_status']),
                            accel_status=str(row['accel_status']),
                            hypoxia_15=int(row['hypoxia_15']),
                            hypoxia_30=int(row['hypoxia_30']),
                            hypoxia_60=int(row['hypoxia_60']),
                        ))

                        Bpm_Last_stop_time = float(row['time'])
                
                await session.commit()
                await asyncio.sleep(1)

    except WebSocketDisconnect:
        print("‚ùå –ö–ª–∏–µ–Ω—Ç WebSocket –ø–ª–æ–¥–∞ –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket –ø–ª–æ–¥–∞: {e}")
    finally:
        try:
            await websocket.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç –æ—Ç WebSocket –ø–ª–æ–¥–∞")
        except RuntimeError:
            print("‚ö†Ô∏è WebSocket —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")


@app.websocket("/ws/uterus")
async def websocket_uterus_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–∫–∏"""
    global Uterus_Last_stop_time
    await websocket.accept()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç –∫ WebSocket –º–∞—Ç–∫–∏")

    try:
        while True:
            async with AsyncSessionLocal() as session:
                result = await session.execute(select(UterusProcessedData.time, UterusProcessedData.power))
                metrics = result.all()

                df_uterus = pd.DataFrame(metrics, columns=["time", "power"])

                print(f"–ù–∞–π–¥–µ–Ω–æ uterus –º–µ—Ç—Ä–∏–∫: {len(metrics)}")

                for _, row in df_uterus.iterrows():
                    if Uterus_Last_stop_time < float(row['time']):
                        uterus_data = {
                        "time": float(row['time']),
                        "power": row['power'],
                        "timestamp": datetime.now().isoformat(),
                        "type": "uterus"
                    }
                        Uterus_Last_stop_time = float(row['time'])
                        await websocket.send_text(json.dumps(uterus_data))

            await asyncio.sleep(1)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –º–∞—Ç–∫–∏: {e}")
    finally:
        await websocket.close()
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç –æ—Ç WebSocket –º–∞—Ç–∫–∏")

@app.get("/")
def read_root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö"""
    return {
        "message": "–ö–¢–ì —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω",
        "endpoints": {
            "fetus_websocket": "/ws/fetus",
            "uterus_websocket": "/ws/uterus",
            "docs": "/docs"
        }
    }

@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")

