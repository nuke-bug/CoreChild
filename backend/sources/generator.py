import csv
import os
import asyncio
import aiofiles
import time
from sqlalchemy import select, update, text
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Dict, Any
import asyncio

from database import (
    DataForGenerator, Interfaces, BpmProcessedData, 
    BpmArchiveProcessedData, UterusProcessedData, UterusArchiveProcessedData
)


STOP_GENERATION = False

import logging
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç SQLAlchemy
logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)

async def clean_processed_data_and_stop(AsyncSessionLocal):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –æ—Ç –¥–∞–Ω–Ω—ã—Ö and STOP GENERATION"""
    
    global STOP_GENERATION
    
    STOP_GENERATION = True
    
    await asyncio.sleep(2)
    
    async with AsyncSessionLocal() as session:
        try:
            # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (—É—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
            tables = [
            'bpm_processed_data',
            'uterus_processed_data',
            'bpm_archive_processed_data',
            'uterus_archive_processed_data'
            ]

            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL)
            await session.execute(text("SET session_replication_role = 'replica';"))

            for table in tables:
                await session.execute(text(f"DELETE FROM {table};"))  # 
                print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")

            # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            await session.execute(text("SET session_replication_role = 'origin';"))

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "archive"
            await session.execute(
            update(Interfaces)
            .where(Interfaces.name == 'archive', Interfaces.is_active == True)
            .values(is_active=False)
            )

            await session.commit()
            print("üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞—Ä—Ö–∏–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")



class CSVParser:
    def __init__(self, file_path=None):
        self.file_path = file_path

    async def parse_file(self, filename: str, delimiter: str = ',') -> Any:
        try:
            print(f"–ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª: {filename}")
            
            if not os.path.exists(filename):
                print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {filename}")
                return None

            async with aiofiles.open(filename, 'r', encoding='utf-8') as f:
                content = await f.read()

            reader = csv.reader(content.splitlines(), delimiter=delimiter)
            data = list(reader)
            print(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –∏–∑ {filename}")
            return data

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {filename}: {e}")
            return None

    def parse_file_sync(self, filename: str, delimiter: str = ',') -> Any:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV-—Ñ–∞–π–ª–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å asyncio.to_thread)"""
        try:
            print(f"–ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {filename}")
            
            if not os.path.exists(filename):
                print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {filename}")
                return None

            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()

            reader = csv.reader(content.splitlines(), delimiter=delimiter)
            data = list(reader)
            print(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –∏–∑ {filename}")
            return data

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {filename}: {e}")
            return None


async def find_data(AsyncSessionLocal):
    async with AsyncSessionLocal() as session:
        try:
            print("=== –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –ò–ó CSV ===")
            data = []

            for data_type in ['hypoxiaa', 'regularr']:
                type_path = f"./{data_type}"

                if not os.path.exists(type_path):
                    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {type_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    continue

                for root, dirs, files in os.walk(type_path):
                    for file in files:
                        if file.endswith('.csv'):
                            full_path = os.path.join(root, file)
                            rel_path = os.path.relpath(full_path, '.')
                            path_parts = rel_path.split(os.sep)

                            if len(path_parts) >= 1:
                                source = path_parts[-1].split('_')[-1].split('.')[0]
                                type_ = path_parts[0]
                                folder = path_parts[-1].split('_')[0]
                                file_id = '0'

                                data_record = DataForGenerator(
                                    source=source,
                                    type_=type_,
                                    folder=folder,
                                    id_=file_id,
                                    is_active=False,
                                    id_patient=float(time.time()),
                                )
                                data.append(data_record)

            print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")

            if data:
                session.add_all(data)
                await session.commit()
                print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                return {"status": "success", "records": len(data)}
            else:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return {"status": "no_data", "records": 0}

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ find_data: {e}")
            await session.rollback()
            return {"status": "error", "message": str(e)}


async def generate_bpm(reader: List[Dict], AsyncSessionLocal):
    async with AsyncSessionLocal() as session:
        try:
            
            print("‚úÖ–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é BPM –¥–∞–Ω–Ω—ã—Ö...")

            result = await session.execute(
                select(Interfaces.id_patient).where(Interfaces.name == 'archive')
            )
            id_patient_result = result.scalar_one_or_none()
            id_patient = id_patient_result if id_patient_result else float(time.time())

            print(f"ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è BPM: {id_patient}")

            start_time = time.time()
            processed_count = 0

            for row in reader:
        
                if STOP_GENERATION == True:
                    print("STOP_GENERATION")
                    return 0
                    
                try:
                    time_sec = float(row[0])
                    value = float(row[1])

                    target_absolute_time = start_time + time_sec
                    wait_time = target_absolute_time - time.time()

                    if wait_time > 0:
                        await asyncio.sleep(wait_time)

                    bpm_data = BpmProcessedData(
                        time=time_sec,
                        bpm=int(value),
                        basal_rhythm=int(value),
                        hrv=0,
                        acceleration=False,
                        deceleration=False,
                        hypoxia="false",
                        basal_status="",
                        hrv_status="",
                        decel_status="",
                        accel_status="",
                        hypoxia_15=0,
                        hypoxia_30=0,
                        hypoxia_60=0,
                        displayed=False
                    )
                    bpm_archive_data = BpmArchiveProcessedData(
                        time=time_sec,
                        bpm=int(value),
                        id_patient=id_patient
                    )

                    session.add(bpm_data)
                    session.add(bpm_archive_data)
                    processed_count += 1

                    if processed_count % 5 == 0:
                        await session.commit()
                        print(f"–ö–æ–º–º–∏—Ç {processed_count} –∑–∞–ø–∏—Å–µ–π BPM")

                except Exception as row_error:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ BPM: {row_error}")
                    continue

            await session.commit()
            print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è BPM –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ generate_bpm: {e}")
            await session.rollback()
            raise


async def generate_uterus(reader: List[Dict], AsyncSessionLocal):
    async with AsyncSessionLocal() as session:
        try:
            print("‚úÖ–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é uterus –¥–∞–Ω–Ω—ã—Ö...")

            result = await session.execute(
                select(Interfaces.id_patient).where(Interfaces.name == 'archive')
            )
            id_patient_result = result.scalar_one_or_none()
            id_patient = id_patient_result if id_patient_result else float(time.time())

            print(f"ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è uterus: {id_patient}")

            start_time = time.time()
            processed_count = 0

            for row in reader:
        
                if STOP_GENERATION == True:
                    print("STOP_GENERATION")
                    return 0
                    
                try:
                    time_sec = float(row[0])
                    value = float(row[1])

                    target_absolute_time = start_time + time_sec
                    wait_time = target_absolute_time - time.time()

                    if wait_time > 0:
                        await asyncio.sleep(wait_time)

                    uterus_data = UterusProcessedData(
                        time=time_sec,
                        power=int(value)
                    )
                    uterus_archive_data = UterusArchiveProcessedData(
                        time=time_sec,
                        power=int(value),
                        id_patient=id_patient
                    )

                    session.add(uterus_data)
                    session.add(uterus_archive_data)
                    processed_count += 1

                    if processed_count % 5 == 0:
                        await session.commit()
                        print(f"–ö–æ–º–º–∏—Ç {processed_count} –∑–∞–ø–∏—Å–µ–π uterus")

                except Exception as row_error:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ uterus: {row_error}")
                    continue

            await session.commit()
            print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è uterus –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ generate_uterus: {e}")
            await session.rollback()
            raise


async def process_single_row(row: DataForGenerator, AsyncSessionLocal) -> bool:
    try:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å: ID={row.id_}, Type={row.type_}, Folder={row.folder}")

        bpm_path = f'./{row.type_}/{row.folder}_bpm.csv'
        uterus_path = f'./{row.type_}/{row.folder}_uterus.csv'

        bpm_exists = await asyncio.to_thread(os.path.exists, bpm_path)
        uterus_exists = await asyncio.to_thread(os.path.exists, uterus_path)

        if not bpm_exists:
            print(f"–§–∞–π–ª BPM –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {bpm_path}")
            return False

        if not uterus_exists:
            print(f"–§–∞–π–ª uterus –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {uterus_path}")
            return False

        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        csv_file_bpm = await asyncio.to_thread(CSVParser, bpm_path)
        csv_file_uterus = await asyncio.to_thread(CSVParser, uterus_path)

        reader_bpm = await asyncio.to_thread(csv_file_bpm.parse_file_sync, csv_file_bpm.file_path)
        reader_uterus = await asyncio.to_thread(csv_file_uterus.parse_file_sync, csv_file_uterus.file_path)

        if not reader_bpm or not reader_uterus:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è {row.id_}")
            return False

        print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –æ–±–∞ —Ñ–∞–π–ª–∞. BPM: {len(reader_bpm)} —Å—Ç—Ä–æ–∫, uterus: {len(reader_uterus)} —Å—Ç—Ä–æ–∫")

        bpm_task = asyncio.create_task(generate_bpm(reader_bpm, AsyncSessionLocal))
        uterus_task = asyncio.create_task(generate_uterus(reader_uterus, AsyncSessionLocal))

        await asyncio.gather(bpm_task, uterus_task, return_exceptions=True)

        async with AsyncSessionLocal() as session:
            update_stmt = update(DataForGenerator).where(
                DataForGenerator.source == row.source,
                DataForGenerator.type_ == row.type_,
                DataForGenerator.folder == row.folder,
                DataForGenerator.id_patient == row.id_patient
            ).values(is_active=True)

            await session.execute(update_stmt)
            await session.commit()

        print(f"–ó–∞–ø–∏—Å—å {row.id_} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {row.id_}: {e}")
        return False


async def start_generation(AsyncSessionLocal):
    global STOP_GENERATION
    STOP_GENERATION = False
    async with AsyncSessionLocal() as session:
        try:
            print("=== –ù–ê–ß–ê–õ–û –ì–ï–ù–ï–†–ê–¶–ò–ò –î–ê–ù–ù–´–• ===")

            result = await session.execute(
                select(Interfaces).where(Interfaces.is_active == False)
            )
            rows = result.scalars().all()
            print(f"–ù–∞–π–¥–µ–Ω–æ Interfaces: {len(rows)}")

            if not rows:
                return {"status": "no_data", "message": "–ù–µ—Ç Interfaces –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º "archive"
            await session.execute(update(Interfaces).where(
                Interfaces.name == 'archive',
                Interfaces.is_active == False
            ).values(is_active=True, id_patient=float(time.time())))

            # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = await session.execute(
                select(DataForGenerator).where(DataForGenerator.is_active == False)
            )
            rows = result.scalars().all()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(rows)}")

            if not rows:
                return {"status": "no_data", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}

            processed_count = 0
            for row in rows:
                success = await process_single_row(row, AsyncSessionLocal)
                if success:
                    processed_count += 1
                break  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å

            print(f"=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò ===")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}")
            return {"status": "success", "processed": processed_count}

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_generation: {e}")
            await session.rollback()
            return {"status": "error", "message": str(e)}


async def update_data(AsyncSessionLocal):
    print("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    try:
        result = await find_data(AsyncSessionLocal)
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_data: {e}")
        return {"status": "error", "message": str(e)}

